#include "project.h"
#include "OpcodeMap.h"
#include "COperandType.h"

OPCODE_DEF
OpcodeMap1[] =
{
	// 0x00
	// ADD
	{ OC_ADD, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_ADD, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_ADD, MK_OP(ADDR_G, TC_b), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_ADD, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },
	{ OC_ADD, MK_REG_OP(REG_AL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_ADD, MK_REG_OP(REG_eAX), MK_OP(ADDR_I, TC_v), OP_NONE },

	// PUSH/POP ES
	{ OC_PUSH, MK_REG_OP(REG_ES), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_ES), OP_NONE, OP_NONE },

	// 0x08
	// OR
	{ OC_OR, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_OR, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_OR, MK_OP(ADDR_G, TC_b), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_OR, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },
	{ OC_OR, MK_REG_OP(REG_AL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_OR, MK_REG_OP(REG_eAX), MK_OP(ADDR_I, TC_v), OP_NONE },

	// PUSH CS
	{ OC_PUSH, MK_REG_OP(REG_CS), OP_NONE, OP_NONE },
	
	// 0x0F
	// two-byte escape
	{ OC_MAP_2, OP_NONE, OP_NONE, OP_NONE },


	// 0x10
	// ADC
	{ OC_ADC, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_ADC, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_ADC, MK_OP(ADDR_G, TC_b), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_ADC, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },
	{ OC_ADC, MK_REG_OP(REG_AL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_ADC, MK_REG_OP(REG_eAX), MK_OP(ADDR_I, TC_v), OP_NONE },

	// PUSH/POP SS
	{ OC_PUSH, MK_REG_OP(REG_SS), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_SS), OP_NONE, OP_NONE },

	// 0x18
	// ADC
	{ OC_SBB, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_SBB, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_SBB, MK_OP(ADDR_G, TC_b), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_SBB, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },
	{ OC_SBB, MK_REG_OP(REG_AL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_SBB, MK_REG_OP(REG_eAX), MK_OP(ADDR_I, TC_v), OP_NONE },

	// PUSH/POP DS
	{ OC_PUSH, MK_REG_OP(REG_DS), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_DS), OP_NONE, OP_NONE },


	// 0x20
	// AND
	{ OC_AND, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_AND, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_AND, MK_OP(ADDR_G, TC_b), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_AND, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },
	{ OC_AND, MK_REG_OP(REG_AL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_AND, MK_REG_OP(REG_eAX), MK_OP(ADDR_I, TC_v), OP_NONE },

	// ES Segment override
	{ OC_SEG, MK_REG_OP(REG_ES), OP_NONE, OP_NONE },
	{ OC_DAA, OP_NONE, OP_NONE, OP_NONE },

	// 0x28
	// SUB
	{ OC_SUB, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_SUB, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_SUB, MK_OP(ADDR_G, TC_b), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_SUB, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },
	{ OC_SUB, MK_REG_OP(REG_AL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_SUB, MK_REG_OP(REG_eAX), MK_OP(ADDR_I, TC_v), OP_NONE },

	// CS Segment override
	{ OC_SEG, MK_REG_OP(REG_CS), OP_NONE, OP_NONE },
	{ OC_DAS, OP_NONE, OP_NONE, OP_NONE },

	// 0x30
	// XOR
	{ OC_XOR, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_XOR, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_XOR, MK_OP(ADDR_G, TC_b), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_XOR, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },
	{ OC_XOR, MK_REG_OP(REG_AL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_XOR, MK_REG_OP(REG_eAX), MK_OP(ADDR_I, TC_v), OP_NONE },

	// SS Segment override
	{ OC_SEG, MK_REG_OP(REG_SS), OP_NONE, OP_NONE },
	{ OC_AAA, OP_NONE, OP_NONE, OP_NONE },

	// 0x38
	// XOR
	{ OC_CMP, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_CMP, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_CMP, MK_OP(ADDR_G, TC_b), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_CMP, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },
	{ OC_CMP, MK_REG_OP(REG_AL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_CMP, MK_REG_OP(REG_eAX), MK_OP(ADDR_I, TC_v), OP_NONE },

	// DS Segment override
	{ OC_SEG, MK_REG_OP(REG_DS), OP_NONE, OP_NONE },
	{ OC_AAS, OP_NONE, OP_NONE, OP_NONE },

	// 0x40
	// INC general register
	{ OC_INC, MK_REG_OP(REG_eAX), OP_NONE, OP_NONE },
	{ OC_INC, MK_REG_OP(REG_eCX), OP_NONE, OP_NONE },
	{ OC_INC, MK_REG_OP(REG_eDX), OP_NONE, OP_NONE },
	{ OC_INC, MK_REG_OP(REG_eBX), OP_NONE, OP_NONE },
	{ OC_INC, MK_REG_OP(REG_eSP), OP_NONE, OP_NONE },
	{ OC_INC, MK_REG_OP(REG_eBP), OP_NONE, OP_NONE },
	{ OC_INC, MK_REG_OP(REG_eSI), OP_NONE, OP_NONE },
	{ OC_INC, MK_REG_OP(REG_eDI), OP_NONE, OP_NONE },

	// 0x48
	// DEC general register
	{ OC_DEC, MK_REG_OP(REG_eAX), OP_NONE, OP_NONE },
	{ OC_DEC, MK_REG_OP(REG_eCX), OP_NONE, OP_NONE },
	{ OC_DEC, MK_REG_OP(REG_eDX), OP_NONE, OP_NONE },
	{ OC_DEC, MK_REG_OP(REG_eBX), OP_NONE, OP_NONE },
	{ OC_DEC, MK_REG_OP(REG_eSP), OP_NONE, OP_NONE },
	{ OC_DEC, MK_REG_OP(REG_eBP), OP_NONE, OP_NONE },
	{ OC_DEC, MK_REG_OP(REG_eSI), OP_NONE, OP_NONE },
	{ OC_DEC, MK_REG_OP(REG_eDI), OP_NONE, OP_NONE },

	// 0x50
	// PUSH general register
	{ OC_PUSH, MK_REG_OP(REG_eAX), OP_NONE, OP_NONE },
	{ OC_PUSH, MK_REG_OP(REG_eCX), OP_NONE, OP_NONE },
	{ OC_PUSH, MK_REG_OP(REG_eDX), OP_NONE, OP_NONE },
	{ OC_PUSH, MK_REG_OP(REG_eBX), OP_NONE, OP_NONE },
	{ OC_PUSH, MK_REG_OP(REG_eSP), OP_NONE, OP_NONE },
	{ OC_PUSH, MK_REG_OP(REG_eBP), OP_NONE, OP_NONE },
	{ OC_PUSH, MK_REG_OP(REG_eSI), OP_NONE, OP_NONE },
	{ OC_PUSH, MK_REG_OP(REG_eDI), OP_NONE, OP_NONE },

	// 0x58
	// POP general register
	{ OC_POP, MK_REG_OP(REG_eAX), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_eCX), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_eDX), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_eBX), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_eSP), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_eBP), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_eSI), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_eDI), OP_NONE, OP_NONE },

	// 0x60
	{ OC_PUSHA, OP_NONE, OP_NONE, OP_NONE },
	{ OC_POPA, OP_NONE, OP_NONE, OP_NONE },
	{ OC_BOUND, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_M, TC_a), OP_NONE },
	{ OC_ARPL, MK_OP(ADDR_E, TC_w), MK_OP(ADDR_G, TC_w), OP_NONE },
	{ OC_SEG, MK_REG_OP(REG_FS), OP_NONE, OP_NONE },
	{ OC_SEG, MK_REG_OP(REG_GS), OP_NONE, OP_NONE },
	// Operand size override
	{ OC_OP_SIZE, OP_NONE, OP_NONE, OP_NONE },
	// Address size override
	{ OC_ADDR_SIZE, OP_NONE, OP_NONE, OP_NONE },

	// 0x68
	{ OC_PUSH, MK_OP(ADDR_I, TC_v), OP_NONE, OP_NONE },
	{ OC_IMUL, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), MK_OP(ADDR_I, TC_v) },
	{ OC_PUSH, MK_OP(ADDR_I, TC_b), OP_NONE, OP_NONE },
	{ OC_IMUL, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), MK_OP(ADDR_I, TC_b) },
	{ OC_INSB, MK_OP(ADDR_Y, TC_b), MK_REG_OP(REG_DX), OP_NONE },
	{ OC_INSWD, MK_OP(ADDR_Y, TC_v), MK_REG_OP(REG_DX), OP_NONE },
	// BUGBUG: Why doesn't this give a compiler error (below)???
	{ OC_OUTSB, MK_REG_OP(REG_DX), MK_OP(ADDR_X, TC_b) },
	{ OC_OUTSWD, MK_REG_OP(REG_DX), MK_OP(ADDR_X, TC_v) },

	// 0x70
	// Short-displacement JMP on condition
	{ OC_JO, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JNO, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JB, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JNB, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JZ, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JNZ, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JBE, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JNBE, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },

	// 0x78
	// Short-displacement JMP on condition
	{ OC_JS, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JNS, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JP, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JNP, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JL, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JNL, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JLE, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JNLE, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },

	// 0x80
	{ OC_MAP_MODRM1, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_MAP_MODRM1, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_I, TC_v), OP_NONE },
	// There is considerable confusion as to this next instruction.
	// The 486 book shows it as invalid; the P2 book shows it as Ev,Ib,
	// but the encoding for AND (for instance), shows that 0x83 (NOT 0x82)is for
	// use with (r/m16,imm8) or (r/m32, imm8), meaning *it* must be Ev,Ib.
	// This would make 0x82 and 0x83 duplicates.  Since I can't find an
	// instruction (at this point) with 0x82 opcode, I will assume it is
	// invalid.
	//{ OC_MAP_MODRM1, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_INVALID, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_MAP_MODRM1, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_I, TC_b), OP_NONE },

	{ OC_TEST, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_TEST, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_XCHG, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_XCHG, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },

	// 0x88
	// MOV
	{ OC_MOV, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_G, TC_b), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },

	{ OC_MOV, MK_OP(ADDR_E, TC_w), MK_OP(ADDR_S, TC_w), OP_NONE },
	// ??? no type?
	//{ OC_LEA, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_M, 0), OP_NONE },
	// I put in TC_v since that seemed appropriate.  will have to revisit.
	{ OC_LEA, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_M, TC_v), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_S, TC_w), MK_OP(ADDR_E, TC_w), OP_NONE },
	{ OC_POP, MK_OP(ADDR_E, TC_v), OP_NONE, OP_NONE },

	// 0x90
	{ OC_NOP, OP_NONE, OP_NONE, OP_NONE },
	// 0x91
	// XCHG word or double word register with eAX
	{ OC_XCHG, MK_REG_OP(REG_eCX), OP_NONE, OP_NONE },
	{ OC_XCHG, MK_REG_OP(REG_eDX), OP_NONE, OP_NONE },
	{ OC_XCHG, MK_REG_OP(REG_eBX), OP_NONE, OP_NONE },
	{ OC_XCHG, MK_REG_OP(REG_eSP), OP_NONE, OP_NONE },
	{ OC_XCHG, MK_REG_OP(REG_eBP), OP_NONE, OP_NONE },
	{ OC_XCHG, MK_REG_OP(REG_eSI), OP_NONE, OP_NONE },
	{ OC_XCHG, MK_REG_OP(REG_eDI), OP_NONE, OP_NONE },

	// 0x98
	{ OC_CBW, OP_NONE, OP_NONE, OP_NONE },
	{ OC_CWD, OP_NONE, OP_NONE, OP_NONE },
	{ OC_CALL, MK_OP(ADDR_A, TC_p), OP_NONE, OP_NONE },
	{ OC_WAIT, OP_NONE, OP_NONE, OP_NONE },
	{ OC_PUSHF, MK_OP(ADDR_F, TC_v), OP_NONE, OP_NONE },
	{ OC_POPF, MK_OP(ADDR_F, TC_v), OP_NONE, OP_NONE },
	{ OC_SAHF, OP_NONE, OP_NONE, OP_NONE },
	{ OC_LAHF, OP_NONE, OP_NONE, OP_NONE },

	// 0xA0
	{ OC_MOV, MK_REG_OP(REG_AL), MK_OP(ADDR_O, TC_b), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_eAX), MK_OP(ADDR_O, TC_v), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_O, TC_b), MK_REG_OP(REG_AL), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_O, TC_v), MK_REG_OP(REG_eAX), OP_NONE },

	{ OC_MOVSB, MK_OP(ADDR_X, TC_b), MK_OP(ADDR_Y, TC_b), OP_NONE },
	{ OC_MOVSWD, MK_OP(ADDR_X, TC_v), MK_OP(ADDR_Y, TC_v), OP_NONE },
	{ OC_CMPSB, MK_OP(ADDR_X, TC_b), MK_OP(ADDR_Y, TC_b), OP_NONE },
	{ OC_CMPSWD, MK_OP(ADDR_X, TC_v), MK_OP(ADDR_Y, TC_v), OP_NONE },

	// 0xA8
	{ OC_TEST, MK_REG_OP(REG_AL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_TEST, MK_REG_OP(REG_eAX), MK_OP(ADDR_I, TC_v), OP_NONE },
	{ OC_STOSB, MK_OP(ADDR_Y, TC_b), MK_REG_OP(REG_AL), OP_NONE },
	{ OC_STOSWD, MK_OP(ADDR_Y, TC_v), MK_REG_OP(REG_eAX), OP_NONE },
	{ OC_LODSB, MK_REG_OP(REG_AL), MK_OP(ADDR_X, TC_b), OP_NONE },
	{ OC_LODSWD, MK_REG_OP(REG_eAX), MK_OP(ADDR_X, TC_v), OP_NONE },
	{ OC_SCASB, MK_REG_OP(REG_AL), MK_OP(ADDR_Y, TC_b), OP_NONE },
	{ OC_SCASWD, MK_REG_OP(REG_eAX), MK_OP(ADDR_Y, TC_v), OP_NONE },

	// 0xB0
	// MOV immediate bytes into byte register
	{ OC_MOV, MK_REG_OP(REG_AL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_CL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_DL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_BL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_AH), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_CH), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_DH), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_BH), MK_OP(ADDR_I, TC_b), OP_NONE },

	// 0xB8
	// MOV immediate word or doubleword into word or doubleword register
	{ OC_MOV, MK_REG_OP(REG_eAX), MK_OP(ADDR_I, TC_v), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_eCX), MK_OP(ADDR_I, TC_v), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_eDX), MK_OP(ADDR_I, TC_v), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_eBX), MK_OP(ADDR_I, TC_v), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_eSP), MK_OP(ADDR_I, TC_v), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_eBP), MK_OP(ADDR_I, TC_v), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_eSI), MK_OP(ADDR_I, TC_v), OP_NONE },
	{ OC_MOV, MK_REG_OP(REG_eDI), MK_OP(ADDR_I, TC_v), OP_NONE },

	// 0xC0
	{ OC_MAP_MODRM2, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_MAP_MODRM2, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_RETN, MK_OP(ADDR_I, TC_w), OP_NONE, OP_NONE },
	{ OC_RETN, OP_NONE, OP_NONE, OP_NONE },

	{ OC_LES, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_M, TC_p), OP_NONE },
	{ OC_LDS, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_M, TC_p), OP_NONE },

	{ OC_MOV, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_I, TC_v), OP_NONE },

	// 0xC8
	{ OC_ENTER, MK_OP(ADDR_I, TC_w), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_LEAVE, OP_NONE, OP_NONE, OP_NONE },

	{ OC_RETF, MK_OP(ADDR_I, TC_w), OP_NONE, OP_NONE },
	{ OC_RETF, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INT3, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INT, MK_OP(ADDR_I, TC_b), OP_NONE, OP_NONE },
	{ OC_INTO, OP_NONE, OP_NONE, OP_NONE },
	{ OC_IRET, OP_NONE, OP_NONE, OP_NONE },

	// 0xD0
	{ OC_MAP_MODRM2, MK_OP(ADDR_E, TC_b), /* 1 */ OP_NONE, OP_NONE },
	{ OC_MAP_MODRM2, MK_OP(ADDR_E, TC_v), /* 1 */ OP_NONE, OP_NONE },
	{ OC_MAP_MODRM2, MK_OP(ADDR_E, TC_b), MK_REG_OP(REG_CL), OP_NONE },
	{ OC_MAP_MODRM2, MK_OP(ADDR_E, TC_v), MK_REG_OP(REG_CL), OP_NONE },

	{ OC_AAM, OP_NONE, OP_NONE, OP_NONE },
	{ OC_AAD, OP_NONE, OP_NONE, OP_NONE },
	{ OC_SALC, OP_NONE, OP_NONE, OP_NONE },
	{ OC_XLAT, OP_NONE, OP_NONE, OP_NONE },

	// 0xD8
	// ESC (escape to coprocessor instruction set)
	{ OC_ESC, OP_NONE, OP_NONE, OP_NONE },
	{ OC_ESC, OP_NONE, OP_NONE, OP_NONE },
	{ OC_ESC, OP_NONE, OP_NONE, OP_NONE },
	{ OC_ESC, OP_NONE, OP_NONE, OP_NONE },
	{ OC_ESC, OP_NONE, OP_NONE, OP_NONE },
	{ OC_ESC, OP_NONE, OP_NONE, OP_NONE },
	{ OC_ESC, OP_NONE, OP_NONE, OP_NONE },
	{ OC_ESC, OP_NONE, OP_NONE, OP_NONE },

	// 0xE0
	{ OC_LOOPNE, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_LOOPE, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_LOOP, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },
	{ OC_JCXZ, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },

	{ OC_IN, MK_REG_OP(REG_AL), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_IN, MK_REG_OP(REG_eAX), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_OUT, MK_OP(ADDR_I, TC_b), MK_REG_OP(REG_AL), OP_NONE },
	{ OC_OUT, MK_OP(ADDR_I, TC_b), MK_REG_OP(REG_eAX), OP_NONE },

	// 0xE8
	{ OC_CALL, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JMP, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JMP, MK_OP(ADDR_A, TC_p), OP_NONE, OP_NONE },
	{ OC_JMP, MK_OP(ADDR_J, TC_b), OP_NONE, OP_NONE },

	{ OC_IN, MK_REG_OP(REG_AL), MK_REG_OP(REG_DX), OP_NONE },
	{ OC_IN, MK_REG_OP(REG_eAX), MK_REG_OP(REG_DX), OP_NONE },
	{ OC_OUT, MK_REG_OP(REG_DX), MK_REG_OP(REG_AL), OP_NONE },
	{ OC_OUT, MK_REG_OP(REG_DX), MK_REG_OP(REG_eAX), OP_NONE },

	// 0xF0
	{ OC_LOCK, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_REPNE, OP_NONE, OP_NONE, OP_NONE },
	{ OC_REP, OP_NONE, OP_NONE, OP_NONE },
	{ OC_HLT, OP_NONE, OP_NONE, OP_NONE },
	{ OC_CMC, OP_NONE, OP_NONE, OP_NONE },
	{ OC_MAP_MODRM3, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_MAP_MODRM3, MK_OP(ADDR_E, TC_v), OP_NONE, OP_NONE },

	// 0xF8
	{ OC_CLC, OP_NONE, OP_NONE, OP_NONE },
	{ OC_STC, OP_NONE, OP_NONE, OP_NONE },
	{ OC_CLI, OP_NONE, OP_NONE, OP_NONE },
	{ OC_STI, OP_NONE, OP_NONE, OP_NONE },
	{ OC_CLD, OP_NONE, OP_NONE, OP_NONE },
	{ OC_STD, OP_NONE, OP_NONE, OP_NONE },
	{ OC_MAP_MODRM4, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN},
	{ OC_MAP_MODRM5, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN }

};

OPCODE_DEF
OpcodeMap2[] =
{
	// 0x00
	{ OC_MAP_MODRM6, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN},
	{ OC_MAP_MODRM7, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_LAR, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_w), OP_NONE },
	{ OC_LSL, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_w), OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_LOADALL, OP_NONE, OP_NONE, OP_NONE },
	{ OC_CLTS, OP_NONE, OP_NONE, OP_NONE },
	{ OC_LOADALLD, OP_NONE, OP_NONE, OP_NONE },

	// 0x08
	// OR
	{ OC_INVD, OP_NONE, OP_NONE, OP_NONE },
	{ OC_WBINVD, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x10
	{ OC_MOV, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_G, TC_b), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },

	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x18
	// ADC
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },


	// 0x20
	// AND
	{ OC_MOV, MK_OP(ADDR_R, TC_d), MK_OP(ADDR_C, TC_d), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_R, TC_d), MK_OP(ADDR_D, TC_d), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_C, TC_d), MK_OP(ADDR_R, TC_d), OP_NONE },
	{ OC_MOV, MK_OP(ADDR_D, TC_d), MK_OP(ADDR_R, TC_d), OP_NONE },

	{ OC_MOV, MK_OP(ADDR_R, TC_d), MK_OP(ADDR_T, TC_d), OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_MOV, MK_OP(ADDR_T, TC_d), MK_OP(ADDR_R, TC_d), OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x28
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x30
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x38
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x40
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x48
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x50
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x58
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x60
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x68
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x70
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x78
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0x80
	// Long-displacement jump on condition (Jv)
	{ OC_JO, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JNO, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JB, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JNB, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JZ, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JNZ, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JBE, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JNBE, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },

	// 0x88
	// Long-displacement jump on condition (Jv)
	{ OC_JS, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JNS, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JP, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JNP, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JL, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JNL, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JLE, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },
	{ OC_JNLE, MK_OP(ADDR_J, TC_v), OP_NONE, OP_NONE },

	// 0x90
	// Byte Set on condition
	{ OC_SETO, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETNO, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETB, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETNB, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETZ, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETNZ, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETBE, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETNBE, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },

	// 0x88
	// Byte Set on condition
	{ OC_SETS, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETNS, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETP, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETNP, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETL, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETNL, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETLE, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_SETNLE, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },

	// 0xA0
	{ OC_PUSH, MK_REG_OP(REG_FS), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_FS), OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_BT, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },

	{ OC_SHLD, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), MK_OP(ADDR_I, TC_b) },
	{ OC_SHLD, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), MK_REG_OP(REG_CL) },
	
	//???
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	//???
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0xA8
	{ OC_PUSH, MK_REG_OP(REG_GS), OP_NONE, OP_NONE },
	{ OC_POP, MK_REG_OP(REG_GS), OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_BTS, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },

	{ OC_SHRD, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), MK_OP(ADDR_I, TC_b) },
	{ OC_SHRD, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), MK_REG_OP(REG_CL) },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_IMUL, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },

	// 0xB0
	{ OC_CMPXCHG, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_CMPXCHG, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_LSS, MK_OP(ADDR_M, TC_p), OP_NONE, OP_NONE },
	{ OC_BTR, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_LFS, MK_OP(ADDR_M, TC_p), OP_NONE, OP_NONE },
	{ OC_LGS, MK_OP(ADDR_M, TC_p), OP_NONE, OP_NONE },
	{ OC_MOVZX, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_MOVZX, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_w), OP_NONE },

	// 0xB8
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_MAP_MODRM8, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_I, TC_b), OP_NONE },
	{ OC_BTC, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_BSF, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },
	{ OC_BSR, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_v), OP_NONE },
	{ OC_MOVSX, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_b), OP_NONE },
	{ OC_MOVSX, MK_OP(ADDR_G, TC_v), MK_OP(ADDR_E, TC_w), OP_NONE },

	// 0xC0
	{ OC_XADD, MK_OP(ADDR_E, TC_b), MK_OP(ADDR_G, TC_b), OP_NONE },
	{ OC_XADD, MK_OP(ADDR_E, TC_v), MK_OP(ADDR_G, TC_v), OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },

	// 0xC8
	{ OC_BSWAP, MK_REG_OP(REG_eAX), OP_NONE, OP_NONE },
	{ OC_BSWAP, MK_REG_OP(REG_eCX), OP_NONE, OP_NONE },
	{ OC_BSWAP, MK_REG_OP(REG_eDX), OP_NONE, OP_NONE },
	{ OC_BSWAP, MK_REG_OP(REG_eBX), OP_NONE, OP_NONE },
	{ OC_BSWAP, MK_REG_OP(REG_eSP), OP_NONE, OP_NONE },
	{ OC_BSWAP, MK_REG_OP(REG_eBP), OP_NONE, OP_NONE },
	{ OC_BSWAP, MK_REG_OP(REG_eSI), OP_NONE, OP_NONE },
	{ OC_BSWAP, MK_REG_OP(REG_eDI), OP_NONE, OP_NONE },

	// 0xD0
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	// 0xD8
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	// 0xE0
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	// 0xE8
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	// 0xF0
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	// 0xF8
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
};

//
// Opcodes determined by the reg field (bits 5,4,3) of
// the modRM byte.  See page A-8 of i486.
//
// If an opcode is OC_MAPMODRM1, then the reg bits of the modRM byte
// that follows indexes into OpcodeMapModRM[1].  Note that index 0
// (that is, OpcodeMapModRM[0]) is NEVER used, since no Grp0 (OC_MAPMODRM0)
// is defined by Intel.
// The reason for this waste of 8 instructions is to allow our arrays to
// mirror the tables in the Intel documentation, i.e., Intel has this
// table starting with index 1, not 0.
//
OPCODE_DEF
OpcodeMapModRM[9][8]	=
{
	{
	// OC_MAPMODRM0 (doesn't exist)
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	},

	{
	// OC_MAPMODRM1
	// The operands for opcodes in this section are defined
	// in the referring opcode map.
	{ OC_ADD, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_OR, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_ADC, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_SBB, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_AND, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_SUB, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_XOR, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_CMP, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	},

	{
	// OC_MAPMODRM2
	// The operands for opcodes in this section are defined
	// in the referring opcode map.
	{ OC_ROL, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_ROR, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_RCL, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_RCR, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_SHL, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_SHR, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_SHL, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	{ OC_SAR, OP_UNKNOWN, OP_UNKNOWN, OP_UNKNOWN },
	},

	{
	// OC_MAPMODRM3
	// This groupt of Opcodes is kindof screwy.  For all of the Grp3
	// instructions except NOT ( /010 ) and NEG ( /011 ), one of the
	// operand's size is defined by the referring fist-byte opcode,
	// and the other is defined here.  At the risk of adding complexity to
	// the disassembly code, we will special case disassembly of Grp3
	// opcodes.
	{ OC_TEST, OP_NONE, OP_NONE, OP_NONE },
	// ???
	// The i486 manual shows TEST being here, too, but the reference
	// sheet for the TEST instruction doesn't mention a /1 version...
	// I think I'll go with the pentium chart; 001 is invalid
	//{ OC_TEST, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_NOT, OP_NONE, OP_NONE, OP_NONE },
	{ OC_NEG, OP_NONE, OP_NONE, OP_NONE },
	{ OC_MUL, OP_NONE, OP_NONE, OP_NONE },
	{ OC_IMUL, OP_NONE, OP_NONE, OP_NONE },
	{ OC_DIV, OP_NONE, OP_NONE, OP_NONE },
	{ OC_IDIV, OP_NONE, OP_NONE, OP_NONE },
	},
	{

	// OC_MAPMODRM4
	{ OC_INC, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_DEC, MK_OP(ADDR_E, TC_b), OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	},

	{
	// OC_MAPMODRM5
	{ OC_INC, MK_OP(ADDR_E, TC_v), OP_NONE, OP_NONE },
	{ OC_DEC, MK_OP(ADDR_E, TC_v), OP_NONE, OP_NONE },
	{ OC_CALL, MK_OP(ADDR_E, TC_v), OP_NONE, OP_NONE },
	{ OC_CALL, MK_OP(ADDR_E, TC_p), OP_NONE, OP_NONE },
	{ OC_JMP, MK_OP(ADDR_E, TC_v), OP_NONE, OP_NONE },
	{ OC_JMP, MK_OP(ADDR_E, TC_p), OP_NONE, OP_NONE },
	{ OC_PUSH, MK_OP(ADDR_E, TC_v), OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	},

	{
	// OC_MAPMODRM6
	{ OC_SLDT, MK_OP(ADDR_E, TC_w), OP_NONE, OP_NONE },
	{ OC_STR, MK_OP(ADDR_E, TC_w), OP_NONE, OP_NONE },
	{ OC_LLDT, MK_OP(ADDR_E, TC_w), OP_NONE, OP_NONE },
	{ OC_LTR, MK_OP(ADDR_E, TC_w), OP_NONE, OP_NONE },
	{ OC_VERR, MK_OP(ADDR_E, TC_w), OP_NONE, OP_NONE },
	{ OC_VERW, MK_OP(ADDR_E, TC_w), OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	},

	{
	// OC_MAPMODRM7
	{ OC_SGDT, MK_OP(ADDR_M, TC_s), OP_NONE, OP_NONE },
	{ OC_SIDT, MK_OP(ADDR_M, TC_s), OP_NONE, OP_NONE },
	{ OC_LGDT, MK_OP(ADDR_M, TC_s), OP_NONE, OP_NONE },
	{ OC_LIDT, MK_OP(ADDR_M, TC_s), OP_NONE, OP_NONE },
	{ OC_SMSW, MK_OP(ADDR_E, TC_w), OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_LMSW, MK_OP(ADDR_E, TC_w), OP_NONE, OP_NONE },
	{ OC_INVLPG, OP_NONE, OP_NONE, OP_NONE },
	},

	{
	// OC_MAPMODRM8
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_INVALID, OP_NONE, OP_NONE, OP_NONE },
	{ OC_BT, OP_NONE, OP_NONE, OP_NONE },
	{ OC_BTS, OP_NONE, OP_NONE, OP_NONE },
	{ OC_BTR, OP_NONE, OP_NONE, OP_NONE },
	{ OC_BTC, OP_NONE, OP_NONE, OP_NONE },
	},
};
